name: CI

on:
  pull_request:
    branches:
      - main
  merge_group:

permissions:
  contents: read
  checks: write

jobs:

  prepare:
    name: Prepare list of test projects
    runs-on: ubuntu-latest
    outputs:
      affected: ${{ steps.extractor.outputs.affected }}
      test-projects: ${{ steps.extractor.outputs.test-projects }}
      e2e-projects: ${{ steps.extractor.outputs.e2e-projects }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
      - name: Setup project
        uses: ./.github/actions/setup
        with:
          dependencies: true
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v4
      - name: Get projects to unit test and e2e test
        id: extractor
        run: |
          affected=$(pnpm exec nx show projects --affected --json | jq -r '.[]')
          tests=$(pnpm exec nx show projects --affected --with-target test --json | jq -r '.[]')
          e2es=$(pnpm exec nx show projects --affected --with-target e2e --json | jq -r '.[]')
          echo "Affected projects: $affected"
          echo "Afected projects with test target: $tests"
          echo "Affected projects with e2e target: $e2es"
          echo "affected=$(printf '%s\n' "${affected[@]}" | jq -R . | jq -s . | jq -c .)" >> $GITHUB_OUTPUT
          echo "test-projects=$(printf '%s\n' "${tests[@]}" | jq -R . | jq -s . | jq -c .)" >> $GITHUB_OUTPUT
          echo "e2e-projects=$(printf '%s\n' "${e2es[@]}" | jq -R . | jq -s . | jq -c .)" >> $GITHUB_OUTPUT

  test:
    name: Unit Test Runner
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ needs.prepare.outputs.test-projects != '[""]' }}
    strategy:
      matrix:
        project: ${{ fromJson(needs.prepare.outputs.test-projects) }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
      - name: Setup project
        uses: ./.github/actions/setup # local action
        with:
          dependencies: true
      - name: Run test
        run: pnpm exec nx run ${{ matrix.project }}:test --codeCoverage --output-style static

  e2e:
    name: E2E Test Runner
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ needs.prepare.outputs.e2e-projects != '[""]' }}
    strategy:
      matrix:
        project: ${{fromJson(needs.prepare.outputs.e2e-projects)}}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Setup project
        uses: ./.github/actions/setup # local action
        with:
          dependencies: true
      - name: Run e2e test
        run: pnpm exec nx run ${{ matrix.project }}:e2e --output-style static

  report:
    name: report
    runs-on: ubuntu-latest
    needs: [prepare,test,e2e]
    # Skip merge group event
    if: always()
    steps:
      - run: echo "${{ toJSON(needs) }}"
      - uses: LouisBrunner/checks-action@v2.0.0
        if: needs.test.result == 'skipped'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Unit Test Check
          conclusion: success
      - uses: LouisBrunner/checks-action@v2.0.0
        if: needs.test.result != 'skipped'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Unit Test Check
          conclusion: ${{needs.test.result}}
      - uses: LouisBrunner/checks-action@v2.0.0
        if: needs.e2e.result == 'skipped'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: E2E Test Check
          conclusion: success
      - uses: LouisBrunner/checks-action@v2.0.0
        if: needs.e2e.result != 'skipped'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: E2E Test Check
          conclusion: ${{needs.e2e.result}}
      - name: Generate list of affected projects report
        id: affected-project-report
        if: github.event_name == 'pull_request'
        run: |
          OUTPUT='## Project affected by this PR'
          for project in $(echo "${{ needs.prepare.outputs.affected }}" | jq -r '.[]'); do
            OUTPUT="$OUTPUT\n- $project"
          done
          echo "report=$OUTPUT" >> $GITHUB_OUTPUT
      - name: Report to PR
        uses: thollander/actions-comment-pull-request@v3
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GH_BOT_TOKEN }}
          comment-tag: ci-report
          message: |
            ${{ steps.affected-project-report.outputs.report }}



